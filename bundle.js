(function (d3$1) {
  'use strict';

  const MAIN_NODE = 'MAIN';
  const VALUE_NODE = 'VALUE';
  const EDI_ATTRIBUTE_NODE = 'EDI_ATTRIBUTE';
  const OTHER_ATTRIBUTE_NODE = 'OTHER_ATTRIBUTE';
  const UNCOLLECTED_ATTRIBUTE_NODE = 'UNCOLLECTED_ATTRIBUTE';

  const colors = {
    White: '#FFFFFF',
    Black : '#000000',
  	Selected: '#39FF14',
    Unselected: '#FF3131',
    Unavailable: '#808080'
  };

  const MAIN_NODE_DISTANCE = 80;
  const MAIN_NODE_SIZE = 100;
  const MAIN_NODE_SHAPE = 'rect';

  const ATTRIBUTE_NODE_DISTANCE = 40;
  const ATTRIBUTE_NODE_SIZE = 20;
  const ATTRIBUTE_NODE_SHAPE = 'circle';

  const VALUE_NODE_DISTANCE = 10;
  const VALUE_NODE_SIZE = 20;
  const VALUE_NODE_SHAPE = 'rect';

  const properties = {
    [MAIN_NODE]: {
      size: MAIN_NODE_SIZE,
      distance: MAIN_NODE_DISTANCE,
      shape: MAIN_NODE_SHAPE
    },
    [EDI_ATTRIBUTE_NODE]: {
      size: ATTRIBUTE_NODE_SIZE,
      distance: ATTRIBUTE_NODE_DISTANCE,
      shape: ATTRIBUTE_NODE_SHAPE
    },
    [OTHER_ATTRIBUTE_NODE]: {
      size: ATTRIBUTE_NODE_SIZE,
      distance: ATTRIBUTE_NODE_DISTANCE,
      shape: ATTRIBUTE_NODE_SHAPE
    },
    [UNCOLLECTED_ATTRIBUTE_NODE]: {
      size: ATTRIBUTE_NODE_SIZE,
      distance: ATTRIBUTE_NODE_DISTANCE,
      shape: ATTRIBUTE_NODE_SHAPE
    },
    [VALUE_NODE]: {
      size: VALUE_NODE_SIZE,
      distance: VALUE_NODE_DISTANCE,
      shape: VALUE_NODE_SHAPE
    },
  };

  const initialNodes = {
    Demographics: {
      links: [
        'Feestat',
        'Age',
        'Sex',
        'Degree',
        'Acadyear',
        'Acadunit',
        'FtpStat',
        'Race',
        'Religion/Spirituality',
        'Geographic Identity',
        'Dis/ability',
        'Indigenous',
        'First Language',
        'Other Language',
      ],
      group: MAIN_NODE,
    },
    Convocations: {
      links: ['Sex', 'Degree', 'Acadyear', 'Acadunit'],
      group: MAIN_NODE,
    },
    Courses: {
      links: ['Acadyear', 'Acadunit'],
      group: MAIN_NODE,
    },
    Feestat: {
      links: ['Domestic', 'International'],
      group: EDI_ATTRIBUTE_NODE,
    },
    Age: {
      links: [
        '17-22',
        '23-29',
        '30-34',
        '35-39',
        '40-44',
        '45-49',
        '50+',
      ],
      group: EDI_ATTRIBUTE_NODE,
    },
    Sex: {
      links: ['Male', 'Female'],
      group: EDI_ATTRIBUTE_NODE,
    },
    Degree: {
      links: ['Undergraduate', 'Graduate'],
      group: OTHER_ATTRIBUTE_NODE,
    },
    Undergraduate: {
      links: ['Bachelors'],
      group: OTHER_ATTRIBUTE_NODE,
    },
    Graduate: {
      links: ['Masters', 'Ph.D'],
      group: OTHER_ATTRIBUTE_NODE,
    },
    Acadunit: {
      links: [
        'Arts & Social Sciences',
        'Public Affairs',
        'Business',
        'STEM',
      ],
      group: OTHER_ATTRIBUTE_NODE,
    },
    STEM: {
      links: ['Science', 'Engineering & Design'],
      group: OTHER_ATTRIBUTE_NODE,
    },
    Acadyear: {
      links: [
        '2013/14',
        '2014/15',
        '2015/16',
        '2016/17',
        '2017/18',
        '2018/19',
        '2019/20',
        '2020/21',
      ],
      group: OTHER_ATTRIBUTE_NODE,
    },
    FtpStat: {
      links: ['Full time', 'Part time'],
      group: OTHER_ATTRIBUTE_NODE,
    },
    Race: {
      links: [],
      group: UNCOLLECTED_ATTRIBUTE_NODE,
    },
    'Religion/Spirituality': {
      links: [],
      group: UNCOLLECTED_ATTRIBUTE_NODE,
    },
    'Geographic Identity': {
      links: [],
      group: UNCOLLECTED_ATTRIBUTE_NODE,
    },
    'Dis/ability': {
      links: [],
      group: UNCOLLECTED_ATTRIBUTE_NODE,
    },
    Indigenous: {
      links: [],
      group: UNCOLLECTED_ATTRIBUTE_NODE,
    },
    'First Language': {
      links: [],
      group: UNCOLLECTED_ATTRIBUTE_NODE,
    },
    'Other Language': {
      links: [],
      group: UNCOLLECTED_ATTRIBUTE_NODE,
    },
  };

  const nodes = [];
  const links = [];

  //populating nodes
  for (const key in initialNodes) {
    const node = initialNodes[key];
    
   	if (!nodes.some(e => e.id === key)){
      nodes.push({
        id: key,
        group: node.group 
      });
    }

    if (node.group == EDI_ATTRIBUTE_NODE || node.group == OTHER_ATTRIBUTE_NODE) {
      for (const link of node.links) {
        nodes.push({
          id: link,
       		group: VALUE_NODE
        });
      }
    }
  }

  //populating links
  for (const node of nodes) {
    if (!initialNodes.hasOwnProperty(node.id)) continue; //value attribute has no links

    const dataNode = initialNodes[node.id];

    for (const link of dataNode.links) {
      links.push({
        source: node,
        target: nodes.find((n) => n.id == link),
        group: node.group
      });
    }
  }

  const nodes_svg = d3$1.select('#nodes');
  const width = +nodes_svg.attr('width');
  const height = +nodes_svg.attr('height');
  const centerX = width / 2;
  const centerY = height / 2;

  const MANY_BODY_STRENGTH = -200;

  const simulation = d3$1.forceSimulation(nodes)
    .force('charge',d3$1.forceManyBody().strength(MANY_BODY_STRENGTH))
    .force('link',d3$1.forceLink(links).distance((link) => properties[link.group].distance))
    .force('center', d3$1.forceCenter(centerX, centerY))
  	.force('collide', d3$1.forceCollide().radius(20));


  const dragInteraction = d3$1.drag().on('drag', (event, node) => {
    node.fx = event.x;
    node.fy = event.y;
    simulation.alpha(1);
  });

  const lines = nodes_svg
    .selectAll('g.lines')
    .data(links)
    .enter()
    .append('line')
    .attr('stroke', 'black');

  const allNodes = nodes_svg
  	.selectAll('g.nodes')
  	.data(nodes)
  	.enter()
  	.append('svg:g')
   	.attr('fill', (node) => node.group === UNCOLLECTED_ATTRIBUTE_NODE ? colors.Unavailable: colors.Unselected)
  	.attr('class', (node) => node.group + ' node')
  	.call(dragInteraction);




  let toggleNode = (node, node_type) => {
    
    
    let currentColor = colors.Unselected;
    currentColor = currentColor == colors.Unselected ? colors.Selected : colors.Unselected;
  	d3.select(node).style("fill", currentColor);
  };


  for (const node_type in properties){
    const selector = d3$1.selectAll('g.' + node_type)
    		.append(properties[node_type].shape);

    if (properties[node_type].shape === 'rect'){
         selector.attr('width', (node) => properties[node_type].size);
      	 selector.attr('height', (node) => properties[node_type].size);
    } else {
      selector.attr('r', (node) => properties[node_type].size);
    }
    
    if (node_type !== UNCOLLECTED_ATTRIBUTE_NODE)
      selector.on('click', function(){ toggleNode(this);});
  }

  allNodes.append('text')
  	.attr('fill', 'black')
    .text((node) => node.id);

  simulation.on('tick', () => {
  	allNodes.attr("transform", (node) => "translate(" + node.x + "," + node.y + ")");

    lines
      .attr('x1', (link) => link.source.x)
      .attr('y1', (link) => link.source.y)
      .attr('x2', (link) => link.target.x)
      .attr('y2', (link) => link.target.y);
  });

  //import {} from './diversitymaps'

  document.addEventListener('DOMContentLoaded', (event) => {
  	displayNodes();
    
    document.getElementById('visualize-button').addEventListener('click', displayViz);
  	document.getElementById('back-button').addEventListener('click', displayNodes);

    function displayNodes(){
      	document.getElementById('node-div').style.display = 'block';
  			document.getElementById('viz-div').style.display = 'none';
    }
    
    function displayViz(){
    		document.getElementById('node-div').style.display = 'none';
  			document.getElementById('viz-div').style.display = 'block';
    }
  });

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,