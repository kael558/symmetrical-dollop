(function (d3$1) {
  'use strict';

  const MAIN_NODE = 'MAIN';
  const VALUE_NODE = 'VALUE';
  const EDI_ATTRIBUTE_NODE = 'EDI_ATTRIBUTE';
  const OTHER_ATTRIBUTE_NODE = 'OTHER_ATTRIBUTE';
  const UNCOLLECTED_ATTRIBUTE_NODE = 'UNCOLLECTED_ATTRIBUTE';

  const colors = {
    White: '#FFFFFF',
    Black : '#000000',
  	Selected: '#39FF14',
    Unselected: '#FF3131',
    Unavailable: '#808080'
  };

  const MAIN_NODE_DISTANCE = 80;
  const MAIN_NODE_SIZE = 100;
  const MAIN_NODE_SHAPE = 'rect';

  const ATTRIBUTE_NODE_DISTANCE = 40;
  const ATTRIBUTE_NODE_SIZE = 20;
  const ATTRIBUTE_NODE_SHAPE = 'circle';

  const VALUE_NODE_DISTANCE = 10;
  const VALUE_NODE_SIZE = 20;
  const VALUE_NODE_SHAPE = 'rect';

  const properties = {
    [MAIN_NODE]: {
      size: MAIN_NODE_SIZE,
      distance: MAIN_NODE_DISTANCE,
      shape: MAIN_NODE_SHAPE
    },
    [EDI_ATTRIBUTE_NODE]: {
      size: ATTRIBUTE_NODE_SIZE,
      distance: ATTRIBUTE_NODE_DISTANCE,
      shape: ATTRIBUTE_NODE_SHAPE
    },
    [OTHER_ATTRIBUTE_NODE]: {
      size: ATTRIBUTE_NODE_SIZE,
      distance: ATTRIBUTE_NODE_DISTANCE,
      shape: ATTRIBUTE_NODE_SHAPE
    },
    [UNCOLLECTED_ATTRIBUTE_NODE]: {
      size: ATTRIBUTE_NODE_SIZE,
      distance: ATTRIBUTE_NODE_DISTANCE,
      shape: ATTRIBUTE_NODE_SHAPE
    },
    [VALUE_NODE]: {
      size: VALUE_NODE_SIZE,
      distance: VALUE_NODE_DISTANCE,
      shape: VALUE_NODE_SHAPE
    },
  };

  const initialNodes = {
    Demographics: {
      links: [
        'Feestat',
        'Age',
        'Sex',
        'Degree',
        'Acadyear',
        'Acadunit',
        'FtpStat',
        'Race',
        'Religion/Spirituality',
        'Geographic Identity',
        'Dis/ability',
        'Indigenous',
        'First Language',
        'Other Language',
      ],
      group: MAIN_NODE,
    },
    Convocations: {
      links: ['Sex', 'Degree', 'Acadyear', 'Acadunit'],
      group: MAIN_NODE,
    },
    Courses: {
      links: ['Acadyear', 'Acadunit'],
      group: MAIN_NODE,
    },
    Feestat: {
      links: ['Domestic', 'International'],
      group: EDI_ATTRIBUTE_NODE,
    },
    Age: {
      links: [
        '17-22',
        '23-29',
        '30-34',
        '35-39',
        '40-44',
        '45-49',
        '50+',
      ],
      group: EDI_ATTRIBUTE_NODE,
    },
    Sex: {
      links: ['Male', 'Female'],
      group: EDI_ATTRIBUTE_NODE,
    },
    Degree: {
      links: ['Undergraduate', 'Graduate'],
      group: OTHER_ATTRIBUTE_NODE,
    },
    Undergraduate: {
      links: ['Bachelors'],
      group: OTHER_ATTRIBUTE_NODE,
    },
    Graduate: {
      links: ['Masters', 'Ph.D'],
      group: OTHER_ATTRIBUTE_NODE,
    },
    Acadunit: {
      links: [
        'Arts & Social Sciences',
        'Public Affairs',
        'Business',
        'STEM',
      ],
      group: OTHER_ATTRIBUTE_NODE,
    },
    STEM: {
      links: ['Science', 'Engineering & Design'],
      group: OTHER_ATTRIBUTE_NODE,
    },
    Acadyear: {
      links: [
        '2013/14',
        '2014/15',
        '2015/16',
        '2016/17',
        '2017/18',
        '2018/19',
        '2019/20',
        '2020/21',
      ],
      group: OTHER_ATTRIBUTE_NODE,
    },
    FtpStat: {
      links: ['Full time', 'Part time'],
      group: OTHER_ATTRIBUTE_NODE,
    },
    Race: {
      links: [],
      group: UNCOLLECTED_ATTRIBUTE_NODE,
    },
    'Religion/Spirituality': {
      links: [],
      group: UNCOLLECTED_ATTRIBUTE_NODE,
    },
    'Geographic Identity': {
      links: [],
      group: UNCOLLECTED_ATTRIBUTE_NODE,
    },
    'Dis/ability': {
      links: [],
      group: UNCOLLECTED_ATTRIBUTE_NODE,
    },
    Indigenous: {
      links: [],
      group: UNCOLLECTED_ATTRIBUTE_NODE,
    },
    'First Language': {
      links: [],
      group: UNCOLLECTED_ATTRIBUTE_NODE,
    },
    'Other Language': {
      links: [],
      group: UNCOLLECTED_ATTRIBUTE_NODE,
    },
  };

  const nodes = [];
  const links = [];

  //populating nodes
  for (const key in initialNodes) {
    const node = initialNodes[key];
    
   	if (!nodes.some(e => e.id === key)){
      nodes.push({
        id: key,
        group: node.group 
      });
    }

    if (node.group == EDI_ATTRIBUTE_NODE || node.group == OTHER_ATTRIBUTE_NODE) {
      for (const link of node.links) {
        nodes.push({
          id: link,
       		group: VALUE_NODE
        });
      }
    }
  }

  //populating links
  for (const node of nodes) {
    if (!initialNodes.hasOwnProperty(node.id)) continue; //value attribute has no links

    const dataNode = initialNodes[node.id];

    for (const link of dataNode.links) {
      links.push({
        source: node,
        target: nodes.find((n) => n.id == link),
        group: node.group
      });
    }
  }

  const w = 960;
  const h = 960;
  const nodes_svg = d3$1.select('#nodes')
  				.attr('height', h)
  				.attr('width', w);

  const width = +nodes_svg.attr('width');
  const height = +nodes_svg.attr('height');
  const centerX = width / 2;
  const centerY = height / 2;

  const MANY_BODY_STRENGTH = -200;

  const simulation = d3$1.forceSimulation(nodes)
    .force('charge',d3$1.forceManyBody().strength(MANY_BODY_STRENGTH))
    .force('link',d3$1.forceLink(links).distance((link) => properties[link.group].distance))
    .force('center', d3$1.forceCenter(centerX, centerY))
  	.force('collide', d3$1.forceCollide().radius(20));


  const dragInteraction = d3$1.drag().on('drag', (event, node) => {
    node.fx = event.x;
    node.fy = event.y;
    simulation.alpha(1);
  });

  const lines = nodes_svg
    .selectAll('g.lines')
    .data(links)
    .enter()
    .append('line')
    .attr('stroke', 'black');

  const allNodes = nodes_svg
  	.selectAll('g.nodes')
  	.data(nodes)
  	.enter()
  	.append('svg:g')
   	.attr('fill', (node) => node.group === UNCOLLECTED_ATTRIBUTE_NODE ? colors.Unavailable: colors.Unselected)
  	.attr('class', (node) => node.group + ' node')
  	.call(dragInteraction);




  let toggleNode = (function(){
    let currentColor = colors.Unselected;
    return function(){
        currentColor = currentColor == colors.Unselected ? colors.Selected : colors.Unselected;
  			d3.select(this).style("fill", currentColor);
    }
  })();


  for (const node_type in properties){
    const selector = d3$1.selectAll('g.' + node_type)
    		.append(properties[node_type].shape);

    if (properties[node_type].shape === 'rect'){
         selector.attr('width', (node) => properties[node_type].size);
      	 selector.attr('height', (node) => properties[node_type].size);
    } else {
      selector.attr('r', (node) => properties[node_type].size);
    }
    
    if (node_type !== UNCOLLECTED_ATTRIBUTE_NODE)
      selector.on('click', toggleNode);
  }

  allNodes.append('text')
  	.attr('fill', 'black')
    .text((node) => node.id);

  simulation.on('tick', () => {
  	allNodes.attr("transform", (node) => "translate(" + node.x + "," + node.y + ")");

    lines
      .attr('x1', (link) => link.source.x)
      .attr('y1', (link) => link.source.y)
      .attr('x2', (link) => link.target.x)
      .attr('y2', (link) => link.target.y);
  });

  var margin = {top: 80, right: 25, bottom: 30, left: 200},
    width$1 = 800 - margin.left - margin.right,
    height$1 = 800 - margin.top - margin.bottom;

  var side_svg = d3
    .select('#side')
      .attr('height', width$1 + margin.left + margin.right)
      .attr('width', height$1 + margin.top + margin.bottom)
  	.append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  let groups = [
    '2013/14',
    '2014/15',
    '2015/16',
    '2016/17',
    '2017/18',
    '2018/19',
    '2019/20',
    '2020/21',
  ];

  let selectedPrimary = 'Acadunit';
  let vars = ['Total', 'Arts & Social Sciences', 'Public Affairs', 'Business', 'Science', 'Engineering & Design'];

  let x = d3.scaleBand().range([0, width$1]).domain(groups).padding(0.05);

  side_svg.append('g').style("font-size", 15)
      .attr("transform", "translate(0," + height$1 + ")")
    	.call(d3.axisBottom(x).tickSize(0));

  let y = d3.scaleBand().range([height$1, 0]).domain(vars).padding(0.05);

  side_svg.append('g').style("font-size", 15).call(d3.axisLeft(y).tickSize(0));

  let color = d3
    .scaleLinear()
    .range(['#FF0000', '#0000FF'])
    .domain([0, 1]);

  d3.csv(
    'https://gist.githubusercontent.com/kael558/7d2cb5258921119df5884cc90902e84d/raw/82b3b8ccad5462269cce2d894f8fa6cd9619d149/fall.csv'
  )
    .then((d) => {
      console.log(d);
    
      const filter = (entry) => {
        if (!vars.includes(entry[selectedPrimary])) return false;
        
        if (entry['Sex'] == 'Total') return false;
        
        for (const prop in entry) {
          	if (prop != 'Year' && prop != selectedPrimary && prop != 'Count' && prop != 'Sex') {
            		if (entry[prop] != 'Total') return false;
          	}
        }
        return true;
      };
      const filtered = d.filter(filter);
    	console.log(filtered);
    	const res = [];
      for (let i = 0; i < filtered.length; i+=2){
        filtered[i].Count/= Number(filtered[i].Count) + Number(filtered[i+1].Count);
      	res.push(filtered[i]);
      }
  		console.log(res);
    	

      side_svg
        .selectAll()
        .data(res, (d) => d.Year + ':' + d[selectedPrimary])
        .enter()
        .append('rect')
        .attr('x', (d) => x(d.Year))
        .attr('y', (d) => y(d[selectedPrimary]))
        .attr('width', x.bandwidth())
        .attr('height', y.bandwidth())
        .style('fill', (d) => color(d.Count));
    })
    .catch((err) => console.log(err));

  document.addEventListener('DOMContentLoaded', (event) => {
  	displayNodes();
    
    document.getElementById('visualize-button').addEventListener('click', displayViz);
  	document.getElementById('back-button').addEventListener('click', displayNodes);
   
    function displayNodes(){
      	document.getElementById('node-div').style.display = 'block';
  			document.getElementById('viz-div').style.display = 'none';
    }
    
    function displayViz(){
    		document.getElementById('node-div').style.display = 'none';
  			document.getElementById('viz-div').style.display = 'block';
    }
  });

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,